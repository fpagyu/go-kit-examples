// Code generated by protoc-gen-go. DO NOT EDIT.
// source: item.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common_pb "go_project_template/pb/gen-go/common_pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetItemNameReq struct {
	BaseReq              *common_pb.BaseReq `protobuf:"bytes,1,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	ItemId               uint32             `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetItemNameReq) Reset()         { *m = GetItemNameReq{} }
func (m *GetItemNameReq) String() string { return proto.CompactTextString(m) }
func (*GetItemNameReq) ProtoMessage()    {}
func (*GetItemNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{0}
}

func (m *GetItemNameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetItemNameReq.Unmarshal(m, b)
}
func (m *GetItemNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetItemNameReq.Marshal(b, m, deterministic)
}
func (m *GetItemNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetItemNameReq.Merge(m, src)
}
func (m *GetItemNameReq) XXX_Size() int {
	return xxx_messageInfo_GetItemNameReq.Size(m)
}
func (m *GetItemNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetItemNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetItemNameReq proto.InternalMessageInfo

func (m *GetItemNameReq) GetBaseReq() *common_pb.BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *GetItemNameReq) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type GetItemNameRsp struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetItemNameRsp) Reset()         { *m = GetItemNameRsp{} }
func (m *GetItemNameRsp) String() string { return proto.CompactTextString(m) }
func (*GetItemNameRsp) ProtoMessage()    {}
func (*GetItemNameRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{1}
}

func (m *GetItemNameRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetItemNameRsp.Unmarshal(m, b)
}
func (m *GetItemNameRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetItemNameRsp.Marshal(b, m, deterministic)
}
func (m *GetItemNameRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetItemNameRsp.Merge(m, src)
}
func (m *GetItemNameRsp) XXX_Size() int {
	return xxx_messageInfo_GetItemNameRsp.Size(m)
}
func (m *GetItemNameRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetItemNameRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetItemNameRsp proto.InternalMessageInfo

func (m *GetItemNameRsp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GetItemNameReq)(nil), "pb.GetItemNameReq")
	proto.RegisterType((*GetItemNameRsp)(nil), "pb.GetItemNameRsp")
}

func init() {
	proto.RegisterFile("item.proto", fileDescriptor_6007f868cf6553df)
}

var fileDescriptor_6007f868cf6553df = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x3f, 0x4f, 0xc3, 0x40,
	0x0c, 0xc5, 0x49, 0x85, 0x1a, 0x70, 0x04, 0x83, 0x07, 0xa8, 0x3a, 0x55, 0xe1, 0x8f, 0xba, 0x90,
	0x93, 0xca, 0xc0, 0xc0, 0x96, 0x05, 0x75, 0x41, 0xe2, 0xd8, 0x58, 0x4e, 0xe7, 0xd4, 0x8a, 0x8a,
	0xb8, 0x9c, 0x93, 0x3b, 0xf1, 0xf9, 0xd1, 0x25, 0x0b, 0x51, 0xb7, 0x9f, 0xfd, 0xec, 0xf7, 0x6c,
	0x80, 0x63, 0x64, 0x57, 0xc9, 0xe0, 0xa3, 0xc7, 0x85, 0xd0, 0xfa, 0xa6, 0xf1, 0xce, 0xf9, 0xce,
	0x08, 0xa9, 0x89, 0x26, 0xad, 0xfc, 0x80, 0xeb, 0x37, 0x8e, 0xfb, 0xc8, 0xee, 0xdd, 0x3a, 0xd6,
	0xdc, 0xe3, 0x23, 0x5c, 0x90, 0x0d, 0x6c, 0x06, 0xee, 0x57, 0xd9, 0x26, 0xdb, 0x16, 0xbb, 0xa2,
	0x12, 0xaa, 0x6a, 0x1b, 0x92, 0xac, 0x73, 0x9a, 0x00, 0x6f, 0x21, 0x4f, 0x19, 0xe6, 0x78, 0x58,
	0x2d, 0x36, 0xd9, 0xf6, 0x4a, 0x2f, 0x53, 0xb9, 0x3f, 0x94, 0xf7, 0x73, 0xcb, 0x20, 0x88, 0x70,
	0xde, 0x59, 0xc7, 0xa3, 0xdd, 0xa5, 0x1e, 0x79, 0x57, 0x43, 0x9e, 0x46, 0x3e, 0x7f, 0x1b, 0x7c,
	0x81, 0xe2, 0xdf, 0x02, 0x62, 0x8a, 0x9b, 0x1f, 0xb5, 0x3e, 0xe9, 0x05, 0x29, 0xcf, 0xea, 0x87,
	0xaf, 0xbb, 0xd6, 0x1b, 0x19, 0xfc, 0x37, 0x37, 0xd1, 0x44, 0x76, 0xf2, 0x63, 0x23, 0x2b, 0x21,
	0xd5, 0x72, 0xf7, 0xd4, 0x7a, 0x25, 0xf4, 0x2a, 0x44, 0xcb, 0xf1, 0xd5, 0xe7, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x83, 0xdd, 0x65, 0x85, 0x14, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ItemSvcClient is the client API for ItemSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ItemSvcClient interface {
	GetItemName(ctx context.Context, in *GetItemNameReq, opts ...grpc.CallOption) (*GetItemNameRsp, error)
}

type itemSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewItemSvcClient(cc grpc.ClientConnInterface) ItemSvcClient {
	return &itemSvcClient{cc}
}

func (c *itemSvcClient) GetItemName(ctx context.Context, in *GetItemNameReq, opts ...grpc.CallOption) (*GetItemNameRsp, error) {
	out := new(GetItemNameRsp)
	err := c.cc.Invoke(ctx, "/pb.ItemSvc/GetItemName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemSvcServer is the server API for ItemSvc service.
type ItemSvcServer interface {
	GetItemName(context.Context, *GetItemNameReq) (*GetItemNameRsp, error)
}

// UnimplementedItemSvcServer can be embedded to have forward compatible implementations.
type UnimplementedItemSvcServer struct {
}

func (*UnimplementedItemSvcServer) GetItemName(ctx context.Context, req *GetItemNameReq) (*GetItemNameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemName not implemented")
}

func RegisterItemSvcServer(s *grpc.Server, srv ItemSvcServer) {
	s.RegisterService(&_ItemSvc_serviceDesc, srv)
}

func _ItemSvc_GetItemName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSvcServer).GetItemName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ItemSvc/GetItemName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSvcServer).GetItemName(ctx, req.(*GetItemNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ItemSvc",
	HandlerType: (*ItemSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemName",
			Handler:    _ItemSvc_GetItemName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item.proto",
}
