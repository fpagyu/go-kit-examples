// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.5.0
// source: addsvc.proto

package addsvcpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	resultcode "new_addsvc/pb/gen-go/resultcode"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The sum request contains two parameters.
type SumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int64 `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B int64 `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *SumRequest) Reset() {
	*x = SumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_addsvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumRequest) ProtoMessage() {}

func (x *SumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_addsvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumRequest.ProtoReflect.Descriptor instead.
func (*SumRequest) Descriptor() ([]byte, []int) {
	return file_addsvc_proto_rawDescGZIP(), []int{0}
}

func (x *SumRequest) GetA() int64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *SumRequest) GetB() int64 {
	if x != nil {
		return x.B
	}
	return 0
}

// The sum response contains the result of the calculation.
type SumReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V       int64                  `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
	Retcode resultcode.RESULT_CODE `protobuf:"varint,2,opt,name=retcode,proto3,enum=resultcode.RESULT_CODE" json:"retcode,omitempty"`
}

func (x *SumReply) Reset() {
	*x = SumReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_addsvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumReply) ProtoMessage() {}

func (x *SumReply) ProtoReflect() protoreflect.Message {
	mi := &file_addsvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumReply.ProtoReflect.Descriptor instead.
func (*SumReply) Descriptor() ([]byte, []int) {
	return file_addsvc_proto_rawDescGZIP(), []int{1}
}

func (x *SumReply) GetV() int64 {
	if x != nil {
		return x.V
	}
	return 0
}

func (x *SumReply) GetRetcode() resultcode.RESULT_CODE {
	if x != nil {
		return x.Retcode
	}
	return resultcode.RESULT_CODE_RET_OK
}

// The Concat request contains two parameters.
type ConcatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B string `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *ConcatRequest) Reset() {
	*x = ConcatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_addsvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatRequest) ProtoMessage() {}

func (x *ConcatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_addsvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatRequest.ProtoReflect.Descriptor instead.
func (*ConcatRequest) Descriptor() ([]byte, []int) {
	return file_addsvc_proto_rawDescGZIP(), []int{2}
}

func (x *ConcatRequest) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *ConcatRequest) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

// The Concat response contains the result of the concatenation.
type ConcatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V       string                 `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	Retcode resultcode.RESULT_CODE `protobuf:"varint,2,opt,name=retcode,proto3,enum=resultcode.RESULT_CODE" json:"retcode,omitempty"`
}

func (x *ConcatReply) Reset() {
	*x = ConcatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_addsvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatReply) ProtoMessage() {}

func (x *ConcatReply) ProtoReflect() protoreflect.Message {
	mi := &file_addsvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatReply.ProtoReflect.Descriptor instead.
func (*ConcatReply) Descriptor() ([]byte, []int) {
	return file_addsvc_proto_rawDescGZIP(), []int{3}
}

func (x *ConcatReply) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

func (x *ConcatReply) GetRetcode() resultcode.RESULT_CODE {
	if x != nil {
		return x.Retcode
	}
	return resultcode.RESULT_CODE_RET_OK
}

var File_addsvc_proto protoreflect.FileDescriptor

var file_addsvc_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x61, 0x64, 0x64, 0x73, 0x76, 0x63, 0x70, 0x62, 0x1a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0a, 0x53, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x01, 0x62, 0x22, 0x4b, 0x0a, 0x08, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x76, 0x12, 0x31,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61,
	0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x62, 0x22, 0x4e,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x76, 0x12, 0x31, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x74,
	0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x12, 0x14, 0x2e, 0x61,
	0x64, 0x64, 0x73, 0x76, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x64, 0x64, 0x73, 0x76, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x75,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x63,
	0x61, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x64, 0x73, 0x76, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x64,
	0x64, 0x73, 0x76, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x73,
	0x76, 0x63, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x64, 0x64,
	0x73, 0x76, 0x63, 0x70, 0x62, 0x3b, 0x61, 0x64, 0x64, 0x73, 0x76, 0x63, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_addsvc_proto_rawDescOnce sync.Once
	file_addsvc_proto_rawDescData = file_addsvc_proto_rawDesc
)

func file_addsvc_proto_rawDescGZIP() []byte {
	file_addsvc_proto_rawDescOnce.Do(func() {
		file_addsvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_addsvc_proto_rawDescData)
	})
	return file_addsvc_proto_rawDescData
}

var file_addsvc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_addsvc_proto_goTypes = []interface{}{
	(*SumRequest)(nil),          // 0: addsvcpb.SumRequest
	(*SumReply)(nil),            // 1: addsvcpb.SumReply
	(*ConcatRequest)(nil),       // 2: addsvcpb.ConcatRequest
	(*ConcatReply)(nil),         // 3: addsvcpb.ConcatReply
	(resultcode.RESULT_CODE)(0), // 4: resultcode.RESULT_CODE
}
var file_addsvc_proto_depIdxs = []int32{
	4, // 0: addsvcpb.SumReply.retcode:type_name -> resultcode.RESULT_CODE
	4, // 1: addsvcpb.ConcatReply.retcode:type_name -> resultcode.RESULT_CODE
	0, // 2: addsvcpb.Add.Sum:input_type -> addsvcpb.SumRequest
	2, // 3: addsvcpb.Add.Concat:input_type -> addsvcpb.ConcatRequest
	1, // 4: addsvcpb.Add.Sum:output_type -> addsvcpb.SumReply
	3, // 5: addsvcpb.Add.Concat:output_type -> addsvcpb.ConcatReply
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_addsvc_proto_init() }
func file_addsvc_proto_init() {
	if File_addsvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_addsvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_addsvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_addsvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_addsvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_addsvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_addsvc_proto_goTypes,
		DependencyIndexes: file_addsvc_proto_depIdxs,
		MessageInfos:      file_addsvc_proto_msgTypes,
	}.Build()
	File_addsvc_proto = out.File
	file_addsvc_proto_rawDesc = nil
	file_addsvc_proto_goTypes = nil
	file_addsvc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AddClient is the client API for Add service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddClient interface {
	// Sums two integers.
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumReply, error)
	// Concatenates two strings
	Concat(ctx context.Context, in *ConcatRequest, opts ...grpc.CallOption) (*ConcatReply, error)
}

type addClient struct {
	cc grpc.ClientConnInterface
}

func NewAddClient(cc grpc.ClientConnInterface) AddClient {
	return &addClient{cc}
}

func (c *addClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumReply, error) {
	out := new(SumReply)
	err := c.cc.Invoke(ctx, "/addsvcpb.Add/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addClient) Concat(ctx context.Context, in *ConcatRequest, opts ...grpc.CallOption) (*ConcatReply, error) {
	out := new(ConcatReply)
	err := c.cc.Invoke(ctx, "/addsvcpb.Add/Concat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddServer is the server API for Add service.
type AddServer interface {
	// Sums two integers.
	Sum(context.Context, *SumRequest) (*SumReply, error)
	// Concatenates two strings
	Concat(context.Context, *ConcatRequest) (*ConcatReply, error)
}

// UnimplementedAddServer can be embedded to have forward compatible implementations.
type UnimplementedAddServer struct {
}

func (*UnimplementedAddServer) Sum(context.Context, *SumRequest) (*SumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedAddServer) Concat(context.Context, *ConcatRequest) (*ConcatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concat not implemented")
}

func RegisterAddServer(s *grpc.Server, srv AddServer) {
	s.RegisterService(&_Add_serviceDesc, srv)
}

func _Add_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addsvcpb.Add/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Add_Concat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServer).Concat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addsvcpb.Add/Concat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServer).Concat(ctx, req.(*ConcatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Add_serviceDesc = grpc.ServiceDesc{
	ServiceName: "addsvcpb.Add",
	HandlerType: (*AddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _Add_Sum_Handler,
		},
		{
			MethodName: "Concat",
			Handler:    _Add_Concat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "addsvc.proto",
}
